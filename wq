#include <iostream>
#include <string>
#include <vector>
#include "tinyjson.hpp"

class Json
{
public:
	static tiny::TinyJson parse(std::string data)
	{
		tiny::TinyJson json;
		json.ReadJson(data);
		return json;
	}

	static void get_value(tiny::TinyJson j, std::string key, std::string &value)
	{
		value = j.Get<std::string>(key);
	}

	static void get_value(tiny::TinyJson j, std::string key, tiny::xarray &value)
	{
		value = j.Get<tiny::xarray>(key);
	}

	static void get_value(tiny::TinyJson j, std::string key, std::vector<std::vector<std::string>> &value)
	{
		std::string object = j.Get<std::string>(key);
		int i = 1;
		while ( i < object.length() - 1)
		{
			std::vector<std::string> item;
			if (object[i] == '[')
			{
				std::string item_string;
				i++;
				while (object[i] != ']' && object[i] != '[')
				{
					if (object[i] != ',' && object[i] != '"' && object[i] != ' ')
					{
						item_string += object[i];
					}
					else if (object[i] == ','  || ( object[i] == '"'&& object[i+1] == ']'))
					{
						item.push_back(item_string);
						item_string = "";
					}
					i++;
				}
			}
			if(!item.empty())
				value.push_back(item);
			i++;
		}
	}
private:
};

template<typename R>
void get_value(tiny::TinyJson j, std::string key, R &value)
{
	Json::get_value(j, key, value);
}
